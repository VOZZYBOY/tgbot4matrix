import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CallbackQueryHandler, CommandHandler, MessageHandler, ContextTypes, filters
import logging
import iam_token_manager  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—à –º–æ–¥—É–ª—å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å IAM —Ç–æ–∫–µ–Ω–∞–º–∏

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏
CATALOG_ID = "b1gb9k14k5ui80g91tnp"
MODEL_URI = f"gpt://{CATALOG_ID}/yandexgpt/rc"
TELEGRAM_TOKEN = "7828823061:AAFqiiM3bQhB2Ab1hidTMXaziGDCps5H3N4"
CHANNEL_ID = "@matrixcrm"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ ID –≤–∞—à–µ–≥–æ –∫–∞–Ω–∞–ª–∞

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ç–µ–∫—Å—Ç–∞ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º YandexGPT
def generate_text(user_description):
    iam_token = iam_token_manager.get_iam_token()  # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—ã–π IAM —Ç–æ–∫–µ–Ω

    url = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
    headers = {
        "Content-Type": "application/json",
        "Authorization": f"Bearer {iam_token}"
    }
    prompt = {
        "modelUri": MODEL_URI,
        "completionOptions": {
            "stream": False,
            "temperature": 0.6,
            "maxTokens": 2000
        },
        "messages": [
            {
                "role": "system",
                "text": (
                    "–ü–∏—à–∏ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω–æ–π –º–∞–∫—Å–∏–º—É–º 1024 —Å–∏–º–≤–æ–ª–∞ - —ç—Ç–æ –≥–ª–∞–≤–Ω–æ–µ"
                    "–ü–∏—à–∏ —Å–ª–æ–≤–æ MatrixCRM —Å–ª–∏—Ç–Ω–æ —Ç—ã –≤—Å–µ –≤—Ä–µ–º—è –ø–∏—à–µ—à—å Matrix CRM"
                    "–¢—ã –ø–æ–º–æ—â–Ω–∏–∫ –∫–æ–º–ø–∞–Ω–∏–∏ MatrixCRM. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –æ–ø–∏—Å–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π CRM-—Å–∏—Å—Ç–µ–º—ã. "
                    "–°–æ–æ–±—â–µ–Ω–∏—è –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –æ–±—ä—ë–º–Ω—ã–º–∏, –¥–µ—Ç–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –∏ –ø–æ–ª–µ–∑–Ω—ã–º–∏. "
                    "–ö–∞–∂–¥–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å —è—Ä–∫–æ–≥–æ –∑–∞–≥–æ–ª–æ–≤–∫–∞ —Å —ç–º–æ–¥–∑–∏, –ø—Ä–∏–≤–ª–µ–∫–∞—é—â–∏–º –≤–Ω–∏–º–∞–Ω–∏–µ, –Ω–∞–ø—Ä–∏–º–µ—Ä: 'üöÄ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ Matrix CRM!'. "
                    "–î–∞–ª–µ–µ –∏–¥—ë—Ç –∫—Ä–∞—Ç–∫–æ–µ –≤–≤–µ–¥–µ–Ω–∏–µ, –ø–æ—è—Å–Ω—è—é—â–µ–µ, —á—Ç–æ —ç—Ç–æ –∑–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∏ –∫–∞–∫ –æ–Ω–æ —É–ª—É—á—à–∞–µ—Ç —Ä–∞–±–æ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π. "
                    "–ö–∞–∂–¥–æ–µ –Ω–æ–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å—Å—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–º–∞–π–ª–æ–º, –Ω–∞–ø—Ä–∏–º–µ—Ä, –µ—Å–ª–∏ —Ä–µ—á—å –∏–¥–µ—Ç –æ –∑–∞–ø–∏—Å–∏, —Ç—ã –ø—É–±–ª–∏–∫—É–µ—à—å —Å–º–∞–π–ª–∏–∫ —á–∞—Å–æ–≤. "
                    "–ü–æ—Å–ª–µ —ç—Ç–æ–≥–æ –ø–µ—Ä–µ—á–∏—Å–ª—è—é—Ç—Å—è –≤—Å–µ –∫–ª—é—á–µ–≤—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ –≤–∏–¥–µ —Å–ø–∏—Å–∫–∞. –ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –¥–æ–ª–∂–µ–Ω —Å–æ–ø—Ä–æ–≤–æ–∂–¥–∞—Ç—å—Å—è —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º —Å–º–∞–π–ª–æ–º, "
                    "–∞ —Ç–∞–∫–∂–µ —Å–æ–¥–µ—Ä–∂–∞—Ç—å –ø–æ–¥—Ä–æ–±–Ω–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∏ –ø—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –Ω–æ–≤–æ–π —Ñ—É–Ω–∫—Ü–∏–∏. –ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ —Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —Å–º–∞–π–ª—ã, —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Å —Ñ—É–Ω–∫—Ü–∏—è–º–∏ CRM. "
                    "–°–æ–æ–±—â–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–∞–µ—Ç—Å—è –ø–æ–∑–∏—Ç–∏–≤–Ω—ã–º –∑–∞–∫–ª—é—á–µ–Ω–∏–µ–º, –≤–¥–æ—Ö–Ω–æ–≤–ª—è—é—â–∏–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–æ–¥–æ–ª–∂–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è MatrixCRM. "
                    "–í –∫–æ–Ω—Ü–µ –∫–∞–∂–¥–æ–≥–æ –ø–æ—Å—Ç–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–±–∞–≤–ª—è–π —Ö—ç—à—Ç–µ–≥–∏: #MatrixCRM #–û–±–Ω–æ–≤–ª–µ–Ω–∏—è #–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–ö–ª–∏–µ–Ω—Ç–∞–º–∏ #–≠—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å."
                )
            },
            {
                "role": "user",
                "text": user_description
            }
        ]
    }
    response = requests.post(url, headers=headers, json=prompt)
    if response.status_code == 200:
        return response.json()["result"]["alternatives"][0]["message"]["text"]
    else:
        return f"–û—à–∏–±–∫–∞ {response.status_code}: {response.text}"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –í–≤–µ–¥–∏—Ç–µ –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –¥–ª—è CRM:")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_description = update.message.text.strip()
    if not user_description:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.")
        return

    await update.message.reply_text("–ì–µ–Ω–µ—Ä–∏—Ä—É—é —Ç–µ–∫—Å—Ç –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏...")
    generated_text = generate_text(user_description)

    keyboard = [
        [InlineKeyboardButton("–£—Ç–≤–µ—Ä–¥–∏—Ç—å", callback_data="approve")],
        [InlineKeyboardButton("–†–µ–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å", callback_data="regenerate")]
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    context.user_data["last_description"] = user_description
    context.user_data["generated_text"] = generated_text
    await update.message.reply_text(f"–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç:\n\n{generated_text}", reply_markup=reply_markup)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ç–æ
async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        photo = update.message.photo[-1]  # –ü–æ–ª—É—á–∞–µ–º —Å–∞–º–æ–µ –±–æ–ª—å—à–æ–µ —Ñ–æ—Ç–æ
        file = await photo.get_file()
        downloaded_file = await file.download_to_drive()  # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ –Ω–∞ –¥–∏—Å–∫
        context.user_data["photo_file"] = downloaded_file  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—É—Ç—å –∫ —Ñ–æ—Ç–æ

        await update.message.reply_text("–§–æ—Ç–æ —É—Å–ø–µ—à–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–æ. –ù–∞–∂–º–∏—Ç–µ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å.")
    except Exception as e:
        await update.message.reply_text(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–æ—Ç–æ: {e}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    if query.data == "approve":
        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å–ª–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        context.user_data["approved_text"] = context.user_data['generated_text']
        keyboard = [
            [InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish")],
            [InlineKeyboardButton("–û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        await query.edit_message_text(f"‚úÖ –¢–µ–∫—Å—Ç —É—Ç–≤–µ—Ä–∂–¥—ë–Ω:\n\n{context.user_data['approved_text']}\n\n–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å?", reply_markup=reply_markup)

    elif query.data == "publish":
        try:
            photo_path = context.user_data.get("photo_file")
            text = context.user_data["approved_text"]

            if len(text) > 1024:
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –¥–ª–∏–Ω–Ω–µ–µ 1024 —Å–∏–º–≤–æ–ª–æ–≤, —Ä–∞–∑–¥–µ–ª—è–µ–º
                caption = text[:1024]  # –ü–µ—Ä–≤–∞—è —á–∞—Å—Ç—å (–º–∞–∫—Å–∏–º—É–º 1024 —Å–∏–º–≤–æ–ª–∞)
                remaining_text = text[1024:]  # –û—Å—Ç–∞–ª—å–Ω–æ–µ

                if photo_path:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ç–æ —Å –ø–µ—Ä–≤–æ–π —á–∞—Å—Ç—å—é —Ç–µ–∫—Å—Ç–∞
                    await context.bot.send_photo(chat_id=CHANNEL_ID, photo=open(photo_path, "rb"), caption=caption)
                else:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–µ—Ä–≤—É—é —á–∞—Å—Ç—å —Ç–µ–∫—Å—Ç–∞
                    await context.bot.send_message(chat_id=CHANNEL_ID, text=caption)

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å—Ç–∞–≤—à–∏–π—Å—è —Ç–µ–∫—Å—Ç –∫–∞–∫ –æ—Ç–¥–µ–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                await context.bot.send_message(chat_id=CHANNEL_ID, text=remaining_text)
            else:
                # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –∫–æ—Ä–æ—á–µ 1024 —Å–∏–º–≤–æ–ª–æ–≤
                if photo_path:
                    await context.bot.send_photo(chat_id=CHANNEL_ID, photo=open(photo_path, "rb"), caption=text)
                else:
                    await context.bot.send_message(chat_id=CHANNEL_ID, text=text)

            await query.edit_message_text(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ –≤ –∫–∞–Ω–∞–ª:\n\n{text}")
        except Exception as e:
            await query.edit_message_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}")
            logger.error(f"–û—à–∏–±–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –≤ –∫–∞–Ω–∞–ª: {e}")

    elif query.data == "cancel":
        # –û—Ç–º–µ–Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
        await query.edit_message_text("‚ùå –ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    elif query.data == "regenerate":
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:")
        context.user_data["waiting_for_regeneration"] = True


# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
def main():
    iam_token_manager.start_token_updater()  # –ó–∞–ø—É—Å–∫ –∞–≤—Ç–æ–æ–±–Ω–æ–≤–ª–µ–Ω–∏—è IAM —Ç–æ–∫–µ–Ω–∞
    app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))
    app.add_handler(CallbackQueryHandler(handle_callback))

    app.run_polling()

if __name__ == "__main__":
    main()

